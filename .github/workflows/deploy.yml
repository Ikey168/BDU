name: Deploy to Cloudflare

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

env:
  NODE_VERSION: '18'

jobs:
  # Lint and test before deployment
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # Frontend checks
      - name: Check if frontend exists
        id: check-frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Frontend package.json found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend package.json not found - skipping frontend checks"
          fi
          
      - name: Install frontend dependencies
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm ci
          
      - name: Lint frontend
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run lint
          
      - name: Test frontend
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run test
          
      - name: Build frontend
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run build
          
      # Workers checks
      - name: Check if workers exists
        id: check-workers
        run: |
          if [ -f "workers/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Workers package.json found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Workers package.json not found - skipping workers checks"
          fi
          
      - name: Install workers dependencies
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npm ci
          
      - name: Lint workers
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npm run lint
          
      - name: Test workers
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npm run test
          
      - name: Type check workers
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npm run type-check

  # Deploy to Cloudflare
  deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: quality-checks
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # Deploy Frontend to Cloudflare Pages
      - name: Check if frontend exists
        id: check-frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Frontend package.json found - will deploy to Cloudflare Pages"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend package.json not found - skipping Pages deployment"
          fi
          
      - name: Install frontend dependencies
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm ci
          
      - name: Build frontend for production
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run build
          
      - name: Deploy to Cloudflare Pages
        if: steps.check-frontend.outputs.exists == 'true'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: ${{ secrets.CF_PAGES_PROJECT_NAME }}
          directory: frontend/out # Next.js static export output
          # Alternative for SPA builds: frontend/dist or frontend/build
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
      # Deploy Workers and run D1 migrations
      - name: Check if workers exists
        id: check-workers
        run: |
          if [ -f "workers/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Workers package.json found - will deploy to Cloudflare Workers"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Workers package.json not found - skipping Workers deployment"
          fi
          
      - name: Install workers dependencies
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npm ci
          
      - name: Setup Wrangler
        if: steps.check-workers.outputs.exists == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          
      - name: Run D1 migrations
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npx wrangler d1 migrations apply ${{ secrets.CF_D1_DATABASE_NAME }} --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          
      - name: Deploy Workers
        if: steps.check-workers.outputs.exists == 'true'
        run: |
          cd workers
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          
  # Notify deployment status
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, deploy]
    if: always()
    
    steps:
      - name: Notify deployment success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "Frontend: Deployed to Cloudflare Pages"
          echo "Workers: Deployed to Cloudflare Workers"
          echo "D1: Migrations applied"
          
      - name: Notify deployment failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details"
          exit 1
